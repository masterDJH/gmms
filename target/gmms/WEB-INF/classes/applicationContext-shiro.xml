<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <!--单点登录配置（配置session管理器，通过session缓存记录所有登录用户）-->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO"></bean>
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg name="name" value="SHRIOSESSIONID"/>
    </bean>
    <!-- 配置shiro session 的一个管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO" ref="sessionDAO"></property>
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
    <!-- 配置shiro 缓存的一个管理器 -->
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean>

    <!-- Shiro的核心对象(权限管理器) -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="jpaRealm"/>
        <!-- shiro 缓存管理器 -->
        <property name="cacheManager" ref="shiroCacheManager"></property>
        <!-- shiro session管理器 -->
        <property name="sessionManager" ref="sessionManager"></property>
    </bean>

    <bean id="jpaRealm" class="cn.djh.gmms.web.shiro.MyRealm">
        <!--配置Realm的名字-->
        <property name="name" value="jpaRealm"/>
        <property name="credentialsMatcher">
            <!--配置哈希密码匹配器-->
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!--设置加密的算法种类-->
                <property name="hashAlgorithmName" value="MD5"/>
                <!-- 设置迭代加密的次数 -->
                <property name="hashIterations" value="10"/>
            </bean>
        </property>
    </bean>

    <!--下面三个可以支持注解权限-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--
        shiro真正的完成功能的过滤器
        这个bean的名称必需和web.xml里的的代理过滤器名字相同
     -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--必会用到权限管理器-->
        <property name="securityManager" ref="securityManager"/>
        <!--如果用户未登录,跳转到此页面、路径-->
        <property name="loginUrl" value="/login"/>
        <!--用户登录成功,跳转到此页面(一般没什么用)、路径-->
        <property name="successUrl" value="/main"/>
        <!--用户没有权限,跳转到此页面、路径-->
        <property name="unauthorizedUrl" value="/s/unauthorized.jsp"/>
        <!-- 过滤描述
            anon:不需要登录就可以访问
            authc:登录与权限的拦截
            perms:如果你有user:index的权限，你就可以访问:/s/permission.jsp
        -->
        <!--<property name="filterChainDefinitions">-->
            <!--&lt;!&ndash;指定放行与拦截的请求&ndash;&gt;-->
            <!--<value>-->
                <!--/login = anon   &lt;!&ndash;放行此请求&ndash;&gt;-->
                <!--/s/permission.jsp = perms[employee:index] &lt;!&ndash;放行有employee:index权限用户的此请求&ndash;&gt;-->
                <!--/** = authc     &lt;!&ndash;拦截所有页面、权限&ndash;&gt;-->
            <!--</value>-->
        <!--</property>-->
        <!--引用id为filterChainDefinitionMap的bean值,以确定拦截和放行的请求-->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>
        <!-- 引用自定义的权限过滤器 -->
        <property name="filters">
            <map>
                <entry key="GmmsPerms" value-ref="GmmsPermissionsFilter"></entry>
            </map>
        </property>
    </bean>

    <!-- 配置自定义权限过滤器 -->
    <bean id="GmmsPermissionsFilter" class="cn.djh.gmms.web.shiro.GmmsPermissionsAuthorizationFilter"/>

    <!--拿到shiroFilterMapFactory类的createMap方法的返回值,即权限拦截映射Map,这个Map装着要拦截、放行的请求-->
    <bean id="filterChainDefinitionMap" factory-bean="shiroFilterMapFactory" factory-method="creatShiroFilterMap"/>
    <!--配置shiro的权限拦截类的bean,这样就由Java代码来动态确定要拦截、放行的请求-->
    <bean id="shiroFilterMapFactory" class="cn.djh.gmms.web.shiro.ShiroFilterMapFactory"/>
</beans>
